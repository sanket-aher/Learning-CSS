.container{
    width: 600px;
    height: 300px;
    background-color: yellow;
    display: grid; /* The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.Setting a container display to grid will make all children grid items. */
    grid-template-rows: 50px 50px 50px 50px 50px; /* It specifies the number of rows in grid layout.The values are space separated list ,where each value specifies the height of the respective row. */
    /* grid-template-columns: 200px 200px 200px;  It specifies the number of columns in grid layout.The values are space separated list ,where each value specifies the size of the respective column. */
    grid-template-columns: repeat(3,1fr); /* or grid-template-columns: 1fr 1fr 1fr;  Repeat: It is used to divide all available space and 1fr is used to give equal space. */ 
    row-gap: 10px; /* Sets the size of the gap between the rows in a layout. */
    column-gap: 20px; /* Sets the size of the gap between the columns in a layout. */
    grid-gap: 10px 20px; /* Shorthand -  grid-gap: row-gap column gap; */
    gap: 10px; /* row-gap:10px and column-gap:10px; */
}

.item{
    /* width:100px;
    height:50px; */
    background-color: greenyellow;
    border: 2px solid black;
    text-align: center;
}

.one{
    /* Grid columns defines an items starting and ending position inside the column. */
    grid-column-start: 1; /* Defines on which column-line the item will start. */
    grid-column-end: 3; /* Defines on which column-line the item will end. */
    grid-column: 1/3; /* Shorthand -  grid-column: grid-column-start/grid-column-end;  */
    grid-column: 1/span 2; /*  grid-column-start/span :- Specifies the number of columns the item will span */ 
}

.two{
    grid-column-start: 3;
    grid-column-end: 4;

    /* Grid rows defines an items starting and ending position inside the row. */
    grid-row-start: 1; /* Defines on which row-line the item will start. */
    grid-row-end: 3; /* Defines on which row-line the item will end. */
    grid-row: 1/3; /* Shorthand -  grid-row: grid-row-start/grid-row-end;  */
    grid-row: 1/span 2; /*  grid-row-start/span :- Specifies the number of rows the item will span */ 
}


.container2{
    margin-top: 40px;
    width: 600px;
    height: 300px;
    background-color: yellow;
    display: inline-grid; /* The inline-grid will make the element inline while grid will make it a block-level element. */
    grid-template-rows: repeat(3,1fr);
    grid-template-columns: repeat(3,1fr);
    justify-items: center; /* The justify-items property is set on the grid container to give child elements (grid items) alignment in the Horizontally direction (center) . */
    align-items: center;  /* The align-items property is set on the grid container to give child elements (grid items) alignment in the Vertically direction (center) . */
    place-items: center;  /* Shorthand property of justify-items and align-items if values are same */
}

.items{
    width:100px;
    height:50px;
    background-color: greenyellow;
    border: 2px solid black;
    text-align: center;
}

.ones{
    justify-self: end; /* The justify-self property aligns a grid item within its grid cell in the Horizontally direction (end). */
    align-self: end; /* The align-self property aligns a grid item within its grid cell in the Vertically direction (end). */
    place-self: end; /* Shorthand property of justify-self and align-self if values are same */
}